   dazzle.service("$dazzleData", function ($window, $http, $compile, $uibModal, $mdDialog, $mdToast, $mdBottomSheet, $ocLazyLoad, $mdDateLocale, $dazzleS3, $dazzlePopup, $dazzleUser,  moment) {

//            this = this;

            this.$http = $http;
            this.$window = $window;
            this.$compile = $compile;
            this.$uibModal = $uibModal;
            this.$mdDialog = $mdDialog;
            this.$mdToast = $mdToast;
            this.$mdBottomSheet = $mdBottomSheet;
            this.$ocLazyLoad = $ocLazyLoad;
            this.$mdDateLocale = $mdDateLocale;
            this.$dazzleS3 = $dazzleS3;
            this.$dazzlePopup = $dazzlePopup;
            this.$dazzleUser = $dazzleUser;
            this.moment = moment;

            var website = $dazzleUser.getDazzleInfo('website');
            var dataKey='';


            this.user = $dazzleUser.getUser();

            console.log(this.user);


            // For New Data Function (2/11/2017)
            this.getTypeByFieldName = function(tableName,fieldName) {
                return new Promise(function (resolve, reject) {
                    this.loadSchemaByTableName(tableName).then(function(schema){
                        angular.forEach(schema,function(item,index){
                            if (item['field']==fieldName)
                                resolve(item['directive']);
                        });
                        resolve('');
                    });
                });
            }
            this.getFieldSchemaByFieldName = function(tableName,fieldName) {
                return new Promise(function (resolve, reject) {
                    this.loadSchemaByTableName(tableName).then(function(schema){
                        angular.forEach(schema,function(item,index){
                            if (item['field']==fieldName) {
                                resolve(item);
                            }
                        });
                        resolve([]);
                    });
                });
            }

            this.getOptionByFieldName = function(tableName,fieldName) {
                return new Promise(function (resolve, reject) {
                    this.loadSchemaByTableName(tableName).then(function(schema){
                        angular.forEach(schema,function(item,index){
                            if (item['field']==fieldName) {

                                resolve(item['cellEditorParams'].values);
                            }
                        });
                        resolve([]);
                    });
                });
            }


            this.loadDataByTableJson = function (tableJson) {
                return new Promise(function (resolve, reject) {
                    console.log('Table Json',tableJson);
                    console.log('Table',tableJson.data.table);
                    if (tableJson.data.type === 's3') {
                        console.log('Load S3 Data');
                        $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + tableJson.data.table + "-data.json").then(function (json) {
                            this.dataLength = json.length;
                            console.log('JSON',json);
                            resolve(json);
                        }, function () {
                            $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + tableJson.data.table + "-data.json", []);
                            resolve([]);
                        });
                    } else if (tableJson.data.type === 'dynamodb') {
                        console.log('Load DynamoDB Data');
                        $http({
                            "method": "post",
                            "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                            "data": {
                                "action": "searchData",
                                "index": tableJson.data.index || "dazzle",
                                "type": tableJson.data.table,
                                "body": {"query": {"match_all": {}}}
                            }
                        }).then(function (result) {
                            //console.log(result);
                            if (result.data.code < 0) {
                                $dazzlePopup.toast(result.data.text + ":" + result.data.reject.msg);
                                resolve([]);
                            } else {
                                this.dataLength = result.data.resolve.length;
                                resolve(result.data.resolve);
                            }
                        });
                    } else {
                        $dazzlePopup.toast("未知數據來源");
                        resolve([]);
                    }
                });
            };
            this.initGrid = function(tableName){
                return new Promise(function (resolve, reject) {
                    this.gridOptions = {
                        rowSelection: 'multiple',
                        rowHeight: 45,
                        animateRows: true,
                        floatingFilter: true,
                        angularCompileRows: true,
                        angularCompileFilters: true,
                        angularCompileHeaders: true,
                        enableColResize: true,
                        enableFilter: true,
                        enableSorting: true,
                        isExternalFilterPresent: function () {
                            return true;
                        },
                        doesExternalFilterPass: function (node) {
                            if (node.deleted) {
                                return false;
                            } else {
                                // if (this.filter) {
                                //     if (this.filter.data.indexOf(node.data[filter.key]) < 0) {
                                //         return false;
                                //     } else {
                                //         return true;
                                //     }
                                // }
                                return true;
                            }
                        },
                        defaultColDef: {
                            headerCheckboxSelection: this.isFirstColumn,
                            checkboxSelection: this.isFirstColumn,
                            editable: true,
                            cellEditor: "text",
                            filter: 'text'
                        },
                        onGridReady: function () {
                            this.loadTableByName(tableName).then(function (table) {
                                this.tableJson = table;
                                if (angular.isArray(this.tableJson.buttons)) {
                                    for (var i = 0; i < this.tableJson.buttons.length; i++) {
                                        this.loadButton(this.tableJson.buttons[i]);
                                    }
                                }
                                this.loadSchemaByTableName(tableName).then(function (json) {
                                    this.schemaJson = json;
                                    this.loadCell(json).then(function () {
                                        console.log('Column JSON', json);

                                        this.gridOptions.api.setColumnDefs(json);
                                        this.gridOptions.api.refreshView();
                                        this.loadDataSet(table, null).then(function (json) {
//                                    this.loadData().then(function (json) {
                                            console.log('Load Json', json);

                                            this.gridOptions.api.setRowData(json);

                                            this.gridOptions.api.refreshView();
                                            console.log('Table:', this.tableJson);
                                            console.log('Schema:', this.schemaJson);
                                            console.log('Data:', json);
                                            resolve(this.gridOptions);
                                        });

                                    });
                                });
                            });
                        },
                        onCellEditingStarted: function (event) {
                            event.this.oldValue = event.value;
                        },
                        onCellEditingStopped: function (event) {
                            if (!angular.isUndefined(event.colDef.key) && event.colDef.key) {
                                this.gridOptions.api.forEachNode(function (rowNode, index) {
                                    if (rowNode.data[event.colDef.field] == event.value && rowNode.rowIndex !== event.rowIndex) {
                                        event.this.rowNode.setDataValue(event.colDef.field, event.this.oldValue);
                                        $dazzlePopup.toast('ERROR: Key already exists');
                                        return;
                                    }
                                });
                            }
                            if (!angular.isUndefined(event.colDef.required) && event.colDef.required) {
                                if (!event.value) {
                                    event.this.rowNode.setDataValue(event.colDef.field, event.this.oldValue);
                                    $dazzlePopup.toast('ERROR: this is required');
                                }
                            }
                        },
                        onCellFocused: function (event) {
                            if (event.rowIndex !== null) {
                                this.gridOptions.api.getModel().rowsToDisplay[event.rowIndex].edited = true;
                            }
                        }
                    }
                });
            }


            this.getDataKey = function(schema) {

                var dataKey;
                for (var i = 0; i < schema.length; i++) {
                    if (schema[i].key)
                        dataKey = schema[i].field;
                }

                return dataKey;
            }
            this.getFormSchema = function (table) {
                console.log('Table Schema',table);
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/content/' + table.data.table + '-schema.json').then(function (json) {
                        resolve(json);
                    }, function () {
                        reject();
                    });
                });
            }

            this.getTableSchema = function (table) {
                console.log('Table Schema',table);
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/content/' + table.data.table + '-schema.json').then(function (json) {
                        resolve(json);
                    }, function () {
                        reject();
                    });
                });
            }


            this.loadDataTable = function (tableName) {

                return new Promise(function (resolve, reject) {
                    console.log('Load Data Table',$dazzleUser.getDazzleInfo('websiteId'));
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-table.json").then(function (json) {
                        resolve(json);
                    }, function () {
                        this.initTable().then(function (t) {
                            resolve(t);
                        });
                    });
                });
            }

            // For New Data Function (2/11/2017)

            this.getGridOptions = function(website,table,ids){
                return new Promise(function (resolve, reject) {

                    console.log('Init Data');
                    this.inited = false;
                    this.website = website;
                    this.table = table;
                    this.filter = null;
                    console.log(this.website);
                    console.log(this.table);
                    this.getWebsiteJson();
                    this.lastUpdated = null;
                    this.gridOptions = {
                        rowSelection: 'multiple',
                        rowHeight: 45,
                        animateRows: true,
                        floatingFilter: true,
                        angularCompileRows: true,
                        angularCompileFilters: true,
                        angularCompileHeaders: true,
                        enableColResize: true,
                        enableFilter: true,
                        enableSorting: true,
                        isExternalFilterPresent: function () {
                            return true;
                        },
                        doesExternalFilterPass: function (node) {
                            if (node.deleted) {
                                return false;
                            } else {
                                // if (this.filter) {
                                //     if (this.filter.data.indexOf(node.data[filter.key]) < 0) {
                                //         return false;
                                //     } else {
                                //         return true;
                                //     }
                                // }
                                return true;
                            }
                        },
                        defaultColDef: {
                            headerCheckboxSelection: this.isFirstColumn,
                            checkboxSelection: this.isFirstColumn,
                            editable: true,
                            cellEditor: "text",
                            filter: 'text'
                        },
                        onGridReady: function () {
                            console.log('Load Table');
                            this.loadTable().then(function (table) {
                                this.tableJson = table;
                                if (angular.isArray(this.tableJson.buttons)) {
                                    for (var i = 0; i < this.tableJson.buttons.length; i++) {
                                        this.loadButton(this.tableJson.buttons[i]);
                                    }
                                }
                                this.loadSchema().then(function (json) {
                                    this.schemaJson = json;
                                    this.loadCell(json).then(function () {
                                        console.log('Column JSON', json);
                                        if (!this.editable)
                                            angular.forEach(json, function (item, index) {
                                                json[index].editable = false;
                                            });
                                        this.gridOptions.api.setColumnDefs(json);
                                        this.gridOptions.api.refreshView();
                                        this.loadDataSet(table, ids).then(function (json) {
                                            //                                    this.loadData().then(function (json) {
                                            console.log('Load Json', json);

                                            this.gridOptions.api.setRowData(json);
                                            this.gridOptions.api.refreshView();
                                            this.inited = true;
                                            console.log('Table:', this.tableJson);
                                            console.log('Schema:', this.schemaJson);
                                            console.log('Data:', json);
                                            resolve(this.gridOptions);
                                        });

                                    });
                                });
                            });
                        },
                        onCellEditingStarted: function (event) {
                            event.this.oldValue = event.value;
                        },
                        onCellEditingStopped: function (event) {
                            if (!angular.isUndefined(event.colDef.key) && event.colDef.key) {
                                this.gridOptions.api.forEachNode(function (rowNode, index) {
                                    if (rowNode.data[event.colDef.field] == event.value && rowNode.rowIndex !== event.rowIndex) {
                                        event.this.rowNode.setDataValue(event.colDef.field, event.this.oldValue);
                                        $dazzlePopup.toast('ERROR: Key already exists');
                                        return;
                                    }
                                });
                            }
                            if (!angular.isUndefined(event.colDef.required) && event.colDef.required) {
                                if (!event.value) {
                                    event.this.rowNode.setDataValue(event.colDef.field, event.this.oldValue);
                                    $dazzlePopup.toast('ERROR: this is required');
                                }
                            }
                        },
                        onCellFocused: function (event) {
                            if (event.rowIndex !== null) {
                                this.gridOptions.api.getModel().rowsToDisplay[event.rowIndex].edited = true;
                            }
                        }
                    }
                });
            }
            this.init = function (website, table, ids) {
                console.log('Init Data');
                this.inited = false;
                this.website = website;
                this.table = table;
                this.filter = null;
                console.log(this.website);
                console.log(this.table);
                this.getWebsiteJson();
                this.lastUpdated = null;
                this.gridOptions = {
                    rowSelection: 'multiple',
                    rowHeight: 45,
                    animateRows: true,
                    floatingFilter: true,
                    angularCompileRows: true,
                    angularCompileFilters: true,
                    angularCompileHeaders: true,
                    enableColResize: true,
                    enableFilter: true,
                    enableSorting: true,
                    isExternalFilterPresent: function () {
                        return true;
                    },
                    doesExternalFilterPass: function (node) {
                        if (node.deleted) {
                            return false;
                        } else {
                            // if (this.filter) {
                            //     if (this.filter.data.indexOf(node.data[filter.key]) < 0) {
                            //         return false;
                            //     } else {
                            //         return true;
                            //     }
                            // }
                            return true;
                        }
                    },
                    defaultColDef: {
                        headerCheckboxSelection: this.isFirstColumn,
                        checkboxSelection: this.isFirstColumn,
                        editable: true,
                        cellEditor: "text",
                        filter: 'text'
                    },
                    onGridReady: function () {
                        this.loadTable().then(function (table) {
                            this.tableJson = table;
                            if (angular.isArray(this.tableJson.buttons)) {
                                for (var i = 0; i < this.tableJson.buttons.length; i++) {
                                    this.loadButton(this.tableJson.buttons[i]);
                                }
                            }
                            this.loadSchema().then(function (json) {
                                this.schemaJson = json;
                                this.loadCell(json).then(function () {
                                    console.log('Column JSON', json);
                                    if (!this.editable)
                                        angular.forEach(json, function (item, index) {
                                            json[index].editable = false;
                                        });
                                    this.gridOptions.api.setColumnDefs(json);
                                    this.gridOptions.api.refreshView();
                                    this.loadDataSet(table,ids).then(function (json) {
//                                    this.loadData().then(function (json) {
                                        console.log('Load Json',json);

                                        this.gridOptions.api.setRowData(json);
                                        this.gridOptions.api.refreshView();
                                        this.inited = true;
                                        console.log('Table:', this.tableJson);
                                        console.log('Schema:', this.schemaJson);
                                        console.log('Data:', json);
                                    });

                                });
                            });
                        });
                    },
                    onCellEditingStarted: function (event) {
                        event.this.oldValue = event.value;
                    },
                    onCellEditingStopped: function (event) {
                        if (!angular.isUndefined(event.colDef.key) && event.colDef.key) {
                            this.gridOptions.api.forEachNode(function (rowNode, index) {
                                if (rowNode.data[event.colDef.field] == event.value && rowNode.rowIndex !== event.rowIndex) {
                                    event.this.rowNode.setDataValue(event.colDef.field, event.this.oldValue);
                                    $dazzlePopup.toast('ERROR: Key already exists');
                                    return;
                                }
                            });
                        }
                        if (!angular.isUndefined(event.colDef.required) && event.colDef.required) {
                            if (!event.value) {
                                event.this.rowNode.setDataValue(event.colDef.field, event.this.oldValue);
                                $dazzlePopup.toast('ERROR: this is required');
                            }
                        }
                        if (this.filter) {
                            this.gridOptions.api.onFilterChanged();
                        }
                    },
                    onCellFocused: function (event) {
                        if (event.rowIndex !== null) {
                            this.gridOptions.api.getModel().rowsToDisplay[event.rowIndex].edited = true;
                        }
                    }
                }
            }

            this.getWebsiteJson = function () {
                $dazzleS3.getJson("dazzle-user-" + this.user.uid, "website/" + this.website + '/json/website.json').then(function (json) {
                    this.websiteJson = json;
                });
            }

            this.loadButton = function (b) {
                $ocLazyLoad.load({files: b.js, cache: false}).then(function () {
                    var button = angular.element(b.html);
                    angular.element('#customButtons').append(button);
                    $compile(button)(this);
                });
            }


            this.editSchema = function () {
                $dazzlePopup.schema(this.website, this.table, this.isForm).then(function (newSchema) {
                    $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + this.website + '/' + "content/" + this.table + "-schema.json", JSON.parse(angular.toJson(newSchema)));
                    this.schemaJson = newSchema;
                    this.loadCell(newSchema).then(function () {
                        this.gridOptions.api.setColumnDefs(newSchema);
                        this.gridOptions.api.refreshView();
                    });
                });
            }
            this.loadTableKey = function(tableName){
                return new Promise(function (resolve, reject) {
                    this.loadTableByName(tableName).then(function(json){
                        console.log('Load Table Key',json);
                        resolve(json.data.key);
                    });
                });
            }
            this.saveFormByName = function(tableName,json) {
                return new Promise(function (resolve, reject) {
                    $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-form.json",json).then(function () {
                        resolve();
                    });
                });
            }

			this.saveTableByName = function(tableName,json) {
				return new Promise(function (resolve, reject) {
					$dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-table.json",json).then(function () {
							resolve();
					});
				});
			}
			this.getTableParamsByName = function(tableName) {
				return new Promise(function (resolve, reject) {
                
					this.loadTableByName(tableName).then(function(json){
						console.log('Table JSON',json);
						if (json.hasOwnProperty('cellEditorParams'))
								resolve(json.cellEditorParams);
							else
								reject();
							
					});
				});
			}
			this.loadFormByName = function(formName){
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + formName + "-form.json").then(function (json) {
                        resolve(json);
                    },function(err){
                        reject();
                    });
                });
            }
            this.loadTableByName = function (tableName) {
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-table.json").then(function (json) {
                        if (json.data && json.data.type && json.data.type === 'dynamodb') {
                            if (json.data.table && json.data.key) {
                                // scope.checkDynamoTable(json.data.table).then(function (dynamodb) {
                                //     resolve(json);
                                // }, function (text) {
                                //     $dazzlePopup.toast("DynamoDB:" + text);
                                //     reject();
                                // });
                                resolve(json);
                            } else if (!json.data.table) {
                                $dazzlePopup.toast('ERROR: 沒有設定Table');
                                reject();
                            } else if (!json.data.key) {
                                $dazzlePopup.toast('ERROR: 沒有設定Key');
                                reject();
                            }
                        } else if (json.data && json.data.type && json.data.type === 's3') {
                            resolve(json);
                        } else {
                            this.initTable().then(function (t) {
                                resolve(t);
                            })
                        }
                    }, function () {
                        this.initTable().then(function (t) {
                            resolve(t);
                        });
                    });
                });
            }
            this.loadTable = function () {
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + this.website + '/' + "content/" + this.table + "-table.json").then(function (json) {
                        if (json.data && json.data.type && json.data.type === 'dynamodb') {
                            if (json.data.table && json.data.key) {
                                // scope.checkDynamoTable(json.data.table).then(function (dynamodb) {
                                //     resolve(json);
                                // }, function (text) {
                                //     $dazzlePopup.toast("DynamoDB:" + text);
                                //     reject();
                                // });
                                resolve(json);
                            } else if (!json.data.table) {
                                $dazzlePopup.toast('ERROR: 沒有設定Table');
                                reject();
                            } else if (!json.data.key) {
                                $dazzlePopup.toast('ERROR: 沒有設定Key');
                                reject();
                            }
                        } else if (json.data && json.data.type && json.data.type === 's3') {
                            resolve(json);
                        } else {
                            this.initTable().then(function (t) {
                                resolve(t);
                            })
                        }
                    }, function () {
                        this.initTable().then(function (t) {
                            resolve(t);
                        });
                    });
                });
            }

            this.initTable = function () {
                return new Promise(function (resolve, reject) {
                    $dazzlePopup.toast('正在初始化s3 Table:' + this.table);
                    var table = {
                        "data": {
                            "type": "s3"
                        },
                        "buttons": []
                    }
                    $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + website + "/content/" + this.table + "-table.json", table);
                    resolve(table);
                });
            }

            this.checkDynamoTable = function (table) {
                return new Promise(function (resolve, reject) {
                    $http({
                        "method": "post",
                        "url": "https://j96d5s2sme.execute-api.ap-northeast-1.amazonaws.com/prod/check",
                        "data": {
                            "action": "checkDynamoTable",
                            "table": table
                        }
                    }).then(function (result) {
                        if (result.data.code == 14) {
                            resolve(result.data.data);
                        } else {
                            reject(result.data.text);
                        }
                    })
                });
            }

            this.loadSchemaDirectiveByTableAndField = function(tableName,field){
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + tableName + "-schema.json").then(function (json) {
                        angular.forEach(json,function(item,index){
                           if (item.headerName == field)
                               resolve(item);
                        });
                    }, function () {
                        reject();
                    });

                });
            }
            this.loadSchemaByTableName = function (tableName) {
                return new Promise(function (resolve, reject) {
                    console.log('Schema Path','dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + tableName + "-schema.json");
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + tableName + "-schema.json").then(function (json) {
                        resolve(json);
                    }, function () {
                        $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + this.table + "-schema.json", []);
                        resolve([]);
                    });
                });
            };
            this.loadFormSchemaItem = function(directiveName){
                $dazzleS3.getJson('dazzle-template' , "file6.0/form-schema-tpl.json").then(function (json) {
                    angular.forEach(json,function(item,key){
                        if (item.directiveName == directiveName)
                            return item;
                    });
                    resolve(json);
                }, function () {
                    return {};
                });

            }
            this.loadSchema = function () {
                return new Promise(function (resolve, reject) {
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + this.table + "-schema.json").then(function (json) {
                        resolve(json);
                    }, function () {
                        $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + this.table + "-schema.json", []);
                        resolve([]);
                    });
                });
            };
            this.loadDataSetByTableName = function(tableName,ids){
                console.log('load Data Set By Table');
                return new Promise(function (resolve, reject) {
                    this.loadTableByName(tableName).then(function (table) {
                        this.loadDataSet(table,ids).then(function(data){
                            resolve(data);
                        },function(err){
                            resolve([]);
                        });
                    });
                });
            }
            this.loadDataSet = function(table,ids){

                return new Promise(function (resolve, reject) {
                    var data = [];
                    var count = 0;
                    var isAll = false;
                    console.log('IDS',ids);
                    console.log('Table',table);
                    if (ids === null)
                        isAll = true;

                    if (table.data.type === 's3') {
                        console.log('Load S3 Data');
                        $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + table.data.table + "-data.json").then(function (json) {
                            if (!isAll){
                                angular.forEach(json,function(item,index){
                                    if (ids.indexOf(item[table.data.key]) > -1 )
                                        data.push(item);
                                });
                                console.log('isAll',isAll);
                                resolve(data);

                            }
                            else {
                                resolve(json);
                            }
                        });
                    } else if (table.data.type === 'dynamodb') {
                        console.log(ids);
                        if (!isAll){
                            console.log('Load BY ID');
                            for(i=0;i<ids.length;i++){
                                this.loadElasticRecordById(table.data.index,table.data.table,ids[i]).then(function(record){

                                    data.push(record);
                                    count++;
                                    console.log('Output',record);
                                    if (count == ids.length)
                                        resolve(data);
                                });

                            }
                        } else {
                            console.log('Load Mass');
                            this.loadElasticRecord(table.data.index,table.data.table).then(function(record){
                                resolve(record);
                            });
                        }
                    } else {
                        $dazzlePopup.toast("未知數據來源");
                        resolve([]);
                    }
                });
            }
            this.loadData = function () {
                return new Promise(function (resolve, reject) {
                    if (this.tableJson.data.type === 's3') {
                        console.log('Load S3 Data');
                        $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + this.table + "-data.json").then(function (json) {
                            resolve(json);
                        }, function () {
                            $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + this.table + "-data.json", []);
                            resolve([]);
                        });
                    } else if (this.tableJson.data.type === 'dynamodb') {
                        console.log('Load DynamoDB Data');
                        $http({
                            "method": "post",
                            "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                            "data": {
                                "action": "searchData",
                                "index": this.tableJson.data.index || "dazzle",
                                "type": this.tableJson.data.table,
                                "body": {"query": {"match_all": {}}}
                            }
                        }).then(function (result) {
                            if (result.data.code < 0) {
                                $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                                reject();
                            } else {
                                resolve(result.data.resolve);
                            }
                        });
                    } else {
                        $dazzlePopup.toast("未知數據來源");
                        resolve([]);
                    }
                });
            };
            this.initDataByName = function(tableName) {
                return new Promise(function (resolve, reject) {

                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-data.json").then(function (json) {
                        resolve();
                    },function(){
                        $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-data.json",[]).then(function () {
                            resolve();
                        });

                    });
                });
            }

            this.saveSchemaByName = function(tableName,json){
                return new Promise(function (resolve, reject) {
                    $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, 'website/' + $dazzleUser.getDazzleInfo('websiteId') + '/' + "content/" + tableName + "-schema.json",json).then(function () {
                        resolve();
                    });
                });
            }
            this.saveRecord = function (db,data) {
                return new Promise(function (resolve, reject) {
                    var field,table;
                    // if (db.refer){
                    //     field = db.referField;
                    //     table = db.referTable;
                    // } else {
                    field = db.field;
                    table = db.table;
                    //}

                    var term={};
                    var thisPageJson = $dazzleUser.getDazzleInfo('thisPageJson');
                    term[field]=data;
                    console.log(term);
                    console.log(thisPageJson);
                    if (!angular.isUndefined(thisPageJson.myID))
                        db.id = thisPageJson.myID;
                    else if (!angular.isUndefined(thisPageJson.exportID)) {
                        db.id=thisPageJson.exportDatas[thisPageJson.exportID];
                    }
                    console.log('Save Record',db);
                    if (db.type === 's3' && !angular.isUndefined(db.id)) {
                        console.log('Load S3 Data');
                        $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + db.table + "-data.json").then(function (json) {
                            angular.forEach(json,function(item,index){
                                if (item[db.key]==db.id) {
                                    item[db.field]=data;
                                }
                            });
                            $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + db.table + "-data.json",json).then(function(){
                                resolve();
                            });
                            resolve({});
                        });
                    } else if (db.type === 'dynamodb' && !angular.isUndefined(db.id)) {
                        console.log('Load DynamoDB Data',db.key,db.id);
                        var params = {
                            "action": "updateData",
                            'index': db.index,
                            'type': table,
                            'id': db.id,
                            body:{
                                doc:term
                            }
                        };
                        console.log('DB',db);
                        console.log('Params',params);
                        $http({
                            "method": "post",
                            "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                            "data": {
                                "action": "updateData",
                                'index': db.index,
                                'type': table,
                                'id': db.id,
                                body:{
                                    doc:term
                                }
                            }
                        }).then(function (result) {
                            console.log(result);
                            if (result.data.code < 0) {
                                console.log(result.data.text + ":" + result.data.err.code);
                                $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                                reject();
                            } else {
                                resolve(result.data.resolve);
                            }
                        });
                    } else {
                        $dazzlePopup.toast("未知數據來源");
                        resolve([]);
                    }
                });
            };
            this.saveValue = function(db,value){
                return new Promise(function (resolve, reject) {
                    // var thisPageJson = $dazzleUser.getDazzleInfo('thisPageJson');
                    // if (!angular.isUndefined(thisPageJson.exportDatas)) {
                    //     if (!db.refer) {
                    //         thisPageJson.exportDatas[db.field]=value;
                    //         $dazzleUser.setDazzleInfo('thisPageJson',thisPageJson);
                    //         resolve(thisPageJson.exportDatas);
                    //     } else {
                    //         resolve('');
                    //     }

                    // }
                });
            };
            this.loadValue = function(db){

                return new Promise(function (resolve, reject) {
                    var thisPageJson = $dazzleUser.getDazzleInfo('thisPageJson');
                    if (!angular.isUndefined(thisPageJson.exportDatas)) {
                        if (!db.refer) {
                            resolve(thisPageJson.exportDatas[db.field]);
                        } else {
                            resolve('');
                        }

                    }
                });
            }
            // Only Allow in Elastic Search
            this.loadDataByModelDb = function(db) {
                return new Promise(function (resolve, reject) {

                    var table,field,id,index,key;
                    var thisPageJson = $dazzleUser.getDazzleInfo('thisPageJson');
                    console.log('DB',db);
                    index = db.index;

                    if (db.refer){
                        console.log(thisPageJson.exportDatas);
                        table = db.referTable;
                        field = db.referField;
                    } else {
                        table = db.table;
                        field = db.field;
                    }
                    key =db.key;
                    console.log({
                        "action": "searchData",
                        "index": index,
                        "type": table,
                        "from":0,
                        "size":10,
                        "body": {"query": {"match_all": {}}},
                        "sort": { key: { "order": "desc" }}
                    });

                    var query = {
                        "action": "searchData",
                        "index": index,
                        "type": table,
                        "body": {
                            "query": {"match_all": {}}
                        }
                    };

                    if (db.hasOwnProperty('limit')) {
                        query['from']=0;
                        query['size']=db.limit;
                    }

                    if (db.hasOwnProperty('sort'))
                        key = db.sort;
                     else
                        key = db.key;

                    if (db.hasOwnProperty('order'))
                        order = db.order;
                    else
                        order = 'desc';

                    query['body']['sort']={};
                    query['body']['sort'][key]={"order":order};

                    if (db.hasOwnProperty('filter')) {
                        query['body']['query']={
                            'filtered': {
                                "query": db.filter
                            }
                        }
                    }

                    console.log('Query',JSON.stringify(query));
                    $http({
                        "method": "post",
                        "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                        "data": query

                    }).then(function (result) {
                        if (result.data.code < 0) {
                            $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                            reject();
                        } else {
                            resolve(result.data.resolve);
                        }
                    });
                    // this.loadElasticRecord(index,table).then(function(record){
                    //     console.log('Rec',record);
                    //     resolve(record);
                    // });
                });
            }

            this.getAtomData = function(db){
                return new Promise(function (resolve, reject) {

                    var table,field,id,index;
                    var thisPageJson = $dazzleUser.getDazzleInfo('thisPageJson');
                    console.log('DB',db);

                    index = db.index;

//                    if (!angular.isUndefined(thisPageJson.exportDatas))
                    //id = thisPageJson.exportDatas[thisPageJson.exportID];
                    // else

                    id = thisPageJson.myID;

                    console.log('Get ID',id);


                    table = db.table;
                    field = db.field;

                    console.log('Load Elastic',index,table,id,field);
                    if (angular.isUndefined(id))
                        reject();

                    if (db.type == "s3"){
                        this.loadTableKey(table).then(function(key){
                            console.log('Load S3',thisPageJson,key);
                            id = thisPageJson.exportDatas[key];
                            this.loadS3RecordById(table,key,id).then(function(record){
                                console.log(record[0]);
                                var rec = record[0];
                                resolve(rec[field]);
                            });
                        });

//                        resolve(thisPageJson.exportDatas[field]);
                    }
                    else if (db.type=="dynamodb"){
                        this.loadElasticRecordById(index,table,id).then(function(record){
                            //var rec = record[0];
                            console.log('Rec',record);
                            resolve(record[field]);
                        });
                    }



                });

            }

            this.saveAtomData = function(db,value){
                return new Promise(function (resolve, reject) {

                    var table,field,id,index;
                    var thisPageJson = $dazzleUser.getDazzleInfo('thisPageJson');
                    var website = $dazzleUser.getDazzleInfo('website');
                    var userBucket = $dazzleUser.getDazzleInfo('userBucket');
                    var websiteKey = $dazzleUser.getDazzleInfo('websiteKey');
                    console.log('DB',db);
                    console.log('Website',$dazzleUser.getDazzleInfo('website'));
                    index = db.index;

                    if (db.refer){
                        console.log(thisPageJson.exportDatas);
                        table = db.referTable;
                        field = db.referField;
                        id = thisPageJson.exportDatas[db.field][0];
                    } else {
                        table = db.table;
                        field = db.field;
                        id = thisPageJson.exportDatas[thisPageJson.exportID];
                    }

                    if (db.type == "s3"){
                        console.log('Load S3 Data',$dazzleUser.getUser().uid,websiteKey,table);
                        $dazzleS3.getJson(userBucket, websiteKey + 'content/' + table + '-data.json').then(function (json) {
                            console.log(json);
                            angular.forEach(json, function (item, index) {
                                console.log('Whole record',thisPageJson.exportID,id,field,value);

                                if (item[thisPageJson.exportID] == id) {
                                    json[index][field] = value;
                                    $dazzleS3.saveJson(userBucket, websiteKey + 'content/' + table + '-data.json', json);
                                }
                            });

                        });
                        // $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + website.website + "/content/" + table + "-data.json").then(function (json) {
                        //     var data = [];
                        //     angular.forEach(json,function(item,index){
                        //         if (item[thisPageJson.exportID]==db.id) {
                        //             item[field] = value;
                        //         }
                        //         data.push(item);
                        //     });
                        //     console.log('JSON',data);
                        //     $dazzleS3.saveJson('dazzle-user-'+$dazzleUser.getUser().uid,'website/'+website.website+'/content/'+table+'-data.json',data).then(function(result){
                        //         resolve(true);
                        //     },function(){
                        //         reject();
                        //     });
                        // });
                        // if (!db.refer)
                        //     thisPageJson.exportDatas[field]=value;

                    }
                    else if (db.type=="dynamodb"){

                        console.log('Load DynamoDB Data',db.key,id);
                        var term={};
                        term[field]=value;
                        var params = {
                            "action": "updateData",
                            'index': db.index,
                            'type': table,
                            'id': id,
                            body:{
                                doc:term
                            }
                        };
                        console.log('Params',params);

                        $http({
                            "method": "post",
                            "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                            "data": {
                                "action": "updateData",
                                'index': db.index,
                                'type': table,
                                'id': id,
                                body:{
                                    doc:term
                                }
                            }
                        }).then(function (result) {
                            console.log('Result',result);
                            if (result.data.code < 0) {
                                console.log(result.data.text + ":" + result.data.err.code);
                                $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                                reject();
                            } else {
                                resolve(true);
                            }
                        });

                    }
                });
            }

            this.loadElasticRecord = function(index,table) {


                return new Promise(function (resolve, reject) {
//                    console.log('Load Elastic Data',id,table,index);
                    $http({
                        "method": "post",
                        "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                        "data": {
                            "action": "searchData",
                            "index": index,
                            "type": table,
                            "body": {"query": {"match_all": {}}}
                        }
                    }).then(function (result) {
                        if (result.data.code < 0) {
                            $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                            reject();
                        } else {
                            resolve(result.data.resolve);
                        }
                    });
                });
            }

            this.loadS3RecordByFilterReturnID = function(table,key,filter) {
                var field = filter.field;
                var value = filter.value;
                var mode = filter.mode;
                var websiteId = $dazzleUser.getDazzleInfo('websiteId');
                var data=[];
                return new Promise(function (resolve, reject) {
                    var data =[];
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + websiteId + "/content/" + table + "-data.json").then(function (json) {
                        angular.forEach(json,function(item,index){
                            console.log(item);
                            switch (mode){
                                case "fizzy":
                                    console.log('Mode',mode,value);
                                    if (item[field].indexOf(value)>-1)
                                        data.push(item[key]);
                                    break;
                                default:
                                    if (item[field]==value)
                                        data.push(item[key]);
                                    break;
                            }
                        });
                        resolve(data);

                    });

                });

            }

            this.createSchema = function(table,json){
                return new Promise(function(resolve,reject){
                    $dazzleS3.saveJson($dazzleUser.getDazzleInfo('userBucket'),$dazzleUser.getDazzleInfo('websiteKey')+'content/'+table+'-schema.json',json).then(function(result){
                        resolve();
                    },function(err){
                        reject();
                    });
                });
            }
            this.initSchema = function(index,table,key){

                var json =     {
                    "editable": true,
                    "cellEditor": "text",
                    "filter": "text",
                    "directive": "text",
                    "directiveName": "文字",
                    "mapping": {
                        "type": "string",
                        "index": "not_analyzed"
                    },
                    "headerName": key,
                    "field": "ID",
                    "key": true,
                    "required": true,
                    "default": "",
                    "defaultByTimestamp": true,
                    "setting": "https://dazzle-template.s3.amazonaws.com/backend6.0/text/setting.html",
                    "width": 200
                };
                return new Promise(function (resolve, reject) {
                    $dazzleS3.saveJson($dazzleUser.getDazzleInfo('userBucket'),$dazzleUser.getDazzleInfo('websiteKey')+'content/'+table+'-schema.json',json).then(function(result){
                        resolve();
                    },function(err){
                        reject();
                    });
                });
            }
            this.createForm = function(table){

                return new Promise(function (resolve, reject) {
                    var json = {
                        "data": {
                            "type": "s3",
                            "table":table,
                            "index":$dazzleUser.getDazzleInfo('userBucket'),
                            "key": "ID"
                        },
                        "buttons": []
                    };
                    $dazzleS3.saveJson($dazzleUser.getDazzleInfo('userBucket'),$dazzleUser.getDazzleInfo('websiteKey')+'content/'+table+'-form.json',json).then(function(result){

                        var schema = {


                        };
                        $dazzleS3.saveJson($dazzleUser.getDazzleInfo('userBucket'),$dazzleUser.getDazzleInfo('websiteKey')+'content/'+table+'-schema.json',schema).then(function(){
                            resolve();
                        });

                    },function(err){
                        reject();
                    });
                });
            }


            this.createTable = function(index,table,key, type){

                return new Promise(function (resolve, reject) {
                    var json = {
                        "data": {
                            "type": type,
                            "table":table,
                            "index":index,
                            "key":key
                        },
                        "buttons": []
                    };
                    $dazzleS3.saveJson($dazzleUser.getDazzleInfo('userBucket'),$dazzleUser.getDazzleInfo('websiteKey')+'content/'+table+'-table.json',json).then(function(result){
                        resolve();
                    },function(err){
                        reject();
                    });
                });
            }

            this.updateElasticRecord = function(index,table,id,rec){
                return new Promise(function (resolve, reject) {
                    var params = [];
                    var dataObject = JSON.parse(angular.toJson(rec));
                    this.clean(dataObject);
                    params.push({
                        "update": {
                            _index: index,
                            _type: table,
                            _id: id
                        }
                    });
                    params.push({
                        "doc": dataObject
                    });

                    console.log('Params',params);


                    $http({
                        "method": "post",
                        "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                        "data": {
                            "action": "bulkData",
                            "body": params
                        }
                    }).then(function (result) {
                        console.log(result);
                        if (result.data.code > 0) {
                            resolve();
                        } else {
                            $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                            reject();
                        }
                    });

                });

            }


            this.createElasticRecord = function(index,table,id,rec){
                return new Promise(function (resolve, reject) {
                    $http({
                        "method": "post",
                        "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                        "data": {
                            "action": "createData",
                            "index": index,
                            "type": table,
                            "id":  id,
                            "body": rec
                        }
                    }).then(function (result) {
                        if (result.data.code < 0) {
                            $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                            reject();
                        } else {
                            resolve(result.data.resolve);
                        }
                    });
                });
            }

            this.createS3Record = function(table,rec) {
                return new Promise(function (resolve, reject) {
                    var data =[];
                    //console.log('Load S3 Data',id,table,key);
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + table + "-data.json").then(function (json) {
                        console.log('JSON',json);
                        if (rec['學生編號']) {
                            json.push(rec);
                            $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteInfo') + "/content/" + table + "-data.json", json).then(function() {
                                resolve(true);
                            },function () {
                                reject();
                            });
                        }
                        else
                            reject("沒有學生編號");
                    });
                });

            }
            this.loadS3RecordById = function(table,key,id) {
                return new Promise(function (resolve, reject) {
                    var data =[];
                    console.log('Load S3 Data',id,table,key);
                    $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + $dazzleUser.getDazzleInfo('websiteId') + "/content/" + table + "-data.json").then(function (json) {
                        angular.forEach(json,function(item,index){
                            console.log(item);
                            if (item[key]==id)
                                data.push(item);
                        });
                        resolve(data);

                    }, function () {
                        $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + table + "-data.json", []);
                        resolve([]);
                    });

                });

            }

            this.loadElasticRecordById = function(index,table,id) {
                return new Promise(function (resolve, reject) {
                    console.log('Load Elastic Data',id,table,index);
                    $http({
                        "method": "post",
                        "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                        "data": {
                            "action": "getData",
                            "index": index,
                            "type": table,
                            "id":id
                        }
                    }).then(function (result) {
                        console.log('Load Elastic Record',result);
                        if (result.data.code < 0) {
                            //$dazzlePopup.toast(result.data.text + ":" + result.data.reject.msg);
                            reject();
                        } else {
                            resolve(result.data.resolve);
                        }
                    });
                });
            }
            this.loadElasticRecordByIds = function(index,table,ids){

                return new Promise(function (resolve, reject) {
                    console.log('Load Elastic IDS',index,table,ids);
                    var data = [];
                    var count = 0;
                    angular.forEach(ids,function(item,key){
                        console.log('Every ID',index,table,item);
                        this.loadElasticRecordById(index,table,item).then(function(row){
                            data.push(row);
                            count ++;
                            if (count==ids.length)
                                resolve(data);
                        });
                    });
                });
            }

            this.loadRecord = function (db) {
                return new Promise(function (resolve, reject) {
                    var field,table;
                    if (db.refer){
                        field = db.referField;
                        table = db.referTable;
                    } else {
                        field = db.field;
                        table = db.table;
                    }

                    if (db.type === 's3') {
                        console.log('Load S3 Data');
                        $dazzleS3.getJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + this.website + "/content/" + db.table + "-data.json").then(function (json) {
                            angular.forEach(json,function(item,index){
                                if (item[db.key]==db.id)
                                    resolve(item);
                            });
                            resolve({});
                        });
                    } else if (db.type === 'dynamodb') {
                        console.log('Load DynamoDB Data',db.key);
                        var search_term={};
                        search_term[db.key]=db.id;
                        console.log(search_term);
                        $http({
                            "method": "post",
                            "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                            "data": {
                                "action": "searchData",
                                "index": db.index,
                                "type": table,
                                "body": {"query":
                                        {
                                            // "term": {
                                            //     "id": db.id
                                            // }
                                            "term": search_term
                                        }
                                }
                            }
                        }).then(function (result) {
                            if (result.data.code < 0) {
                                $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                                reject();
                            } else {
                                resolve(result.data.resolve);
                            }
                        });
                    } else {
                        $dazzlePopup.toast("未知數據來源");
                        resolve([]);
                    }
                });
            };


            this.loadCell = function (schema) {
                return new Promise(function (resolve, reject) {
                    for (var i = 0; i < schema.length; i++) {
                        if (schema[i].key)
                            dataKey = schema[i].field;

                        if (!angular.isUndefined(schema[i].jsId)) {
                            this.setCellJs(schema[i]);
                        }
                        if (!angular.isUndefined(schema[i].cellEditor)) {
                            this.setCellEditor(schema[i]);
                        }
                        if (!angular.isUndefined(schema[i].cellRenderer)) {
                            this.setCellRenderer(schema[i]);
                        }
                        if (!angular.isUndefined(schema[i].cellFilter)) {
                            this.setCellFilter(schema[i]);
                        }
                        if (!angular.isUndefined(schema[i].cellFilterer)) {
                            this.setCellFilterer(schema[i]);
                        }
                    }
                    setTimeout(function () {
                        resolve();
                    }, 1000);
                });
            }

            this.setCellJs = function (schema) {
                $ocLazyLoad.load("https://dazzle-template.s3.amazonaws.com/backend6.0/" + schema.directive + "/js/" + schema.jsId + '.js', {cache: false});
            }

            this.setCellFilterer = function (schema) {
                $ocLazyLoad.load("https://dazzle-template.s3.amazonaws.com/backend6.0/" + schema.directive + "/" + schema.cellFilterer + ".js", {cache: false}).then(function () {
                    schema.filter = window[schema.cellFilterer];
                });
            }

            this.setCellFilter = function (schema) {
                $ocLazyLoad.load("https://dazzle-template.s3.amazonaws.com/backend6.0/" + schema.directive + "/" + schema.cellFilter + ".js", {cache: false}).then(function () {
                    schema.filterParams = window[schema.cellFilter];
                });
            }

            this.setCellEditor = function (schema) {
                $ocLazyLoad.load("https://dazzle-template.s3.amazonaws.com/backend6.0/" + schema.directive + "/" + schema.cellEditor + ".js", {cache: false}).then(function () {
                    this.gridOptions.api.cellEditorFactory.addCellEditor(schema.cellEditor, window[schema.cellEditor]);
                });
            }

            this.setCellRenderer = function (schema) {
                $ocLazyLoad.load("https://dazzle-template.s3.amazonaws.com/backend6.0/" + schema.directive + "/" + schema.cellRenderer + ".js", {cache: false}).then(function () {
                    this.gridOptions.api.cellRendererFactory.addCellRenderer(schema.cellRenderer, window[schema.cellRenderer]);
                });
            }


            this.referAdd = function (object) {
                console.log('Open Data Select');
                $dazzlePopup.dataSelect(this.website, this.table).then(function (data) {

                });

            }

            this.addFilter = function (filter) {
                this.filter = filter;
                this.gridOptions.api.onFilterChanged();
            }

            this.add = function (object) {
                var date = new Date().getTime().toString();
                var newObject = {};
                if (object) {
                    newObject = object;
                }
                if (this.tableJson.data.type === 'dynamodb') {
                    newObject[this.tableJson.data.key] = date;
                }
                for (var i = 0; i < this.schemaJson.length; i++) {
                    if (this.schemaJson[i].defaultByTimestamp) {
                        newObject[this.schemaJson[i].field] = date;
                    } else if (this.schemaJson[i].default) {
                        newObject[this.schemaJson[i].field] = this.schemaJson[i].default;
                    }
                }
                if (filter) {
                    filter.data.push(date);
                    newObject[filter.key] = date;
                }
                this.gridOptions.api.updateRowData({add: [newObject], addIndex: 0});
                this.gridOptions.api.refreshInMemoryRowModel();
                this.gridOptions.api.getModel().rowsToDisplay[0].edited = true;

            }

            this.remove = function () {
                var nodes = this.gridOptions.api.getSelectedNodes();
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].deleted = true;
                }
                this.gridOptions.api.onFilterChanged();
            }

            this.refresh = function () {
                console.log('Refresh');
                this.loadCell(this.schemaJson).then(function () {
                    this.gridOptions.api.setColumnDefs(this.schemaJson);
                });
                this.loadData().then(function (json) {
                    this.gridOptions.api.setRowData(json);
                });
            }

            this.isFirstColumn = function (params) {
                var displayedColumns = params.columnApi.getAllDisplayedColumns();
                var thisIsFirstColumn = displayedColumns[0] === params.column;
                return thisIsFirstColumn;
            }

            this.cancel = function () {
                $mdDialog.hide(this.lastUpdated);
            }

            this.save = function () {
                return new Promise(function (resolve, reject) {
                    this.saveSchema();
                    this.getData().then(function (result) {
                        this.saveData(result).then(function () {
                            $dazzlePopup.toast('儲存成功');
                            resolve(result);
                        });
                    });
                });
            }

			
            this.saveSchema = function () {
                var newShcema = [];
                var oldSchema = this.gridOptions.columnApi.getAllGridColumns();
                for (var i = 0; i < oldSchema.length; i++) {
                    oldSchema[i].colDef.width = oldSchema[i].actualWidth;
                    for (var obj in oldSchema[i].colDef) {
                        if (obj !== 'headerCheckboxSelection' && obj !== 'checkboxSelection' && Object.prototype.toString.call(oldSchema[i].colDef[obj]) == '[object Function]') {
                            delete oldSchema[i].colDef[obj];
                        }
                    }
                    newShcema.push(oldSchema[i].colDef);
                }
                $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + website + "/content/" + this.table + "-schema.json", JSON.parse(angular.toJson(newShcema)));
                this.schemaJson = newShcema;
            }

            this.saveData = function (data) {
                return new Promise(function (resolve, reject) {
                    console.log(data);
                    if (this.tableJson.data.type === 's3') {
                        console.log('save to s3');
                        this.gridOptions.api.removeItems(data.deleted);
                        $dazzleS3.saveJson('dazzle-user-' + $dazzleUser.getUser().uid, "website/" + website + "/content/" + this.table + "-data.json", JSON.parse(angular.toJson(data.rows))).then(function () {
                            resolve();
                        });
                    } else if (this.tableJson.data.type === 'dynamodb') {
                        var params = [];
                        for (var i = 0; i < data.deleted.length; i++) {
                            var dataObject = JSON.parse(angular.toJson(data.deleted[i].data));
                            params.push({
                                "delete": {
                                    _index: this.tableJson.data.index || 'dazzle',
                                    _type: this.tableJson.data.table,
                                    _id: dataObject[this.tableJson.data.key]
                                }
                            });
                        }
                        for (var i = 0; i < data.edited.length; i++) {
                            var dataObject = JSON.parse(angular.toJson(data.edited[i].data));
                            this.clean(dataObject);
                            params.push({
                                "delete": {
                                    _index: this.tableJson.data.index || 'dazzle',
                                    _type: this.tableJson.data.table,
                                    _id: dataObject[this.tableJson.data.key]
                                }
                            });
                            params.push({
                                "create": {
                                    "_index": this.tableJson.data.index || "dazzle",
                                    "_type": this.tableJson.data.table,
                                    "_id": dataObject[this.tableJson.data.key]
                                }
                            });
                            params.push(dataObject);
                        }
                        $http({
                            "method": "post",
                            "url": "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController",
                            "data": {
                                "action": "bulkData",
                                "body": params
                            }
                        }).then(function (result) {
                            console.log(result);
                            if (result.data.code > 0) {
                                resolve();
                            } else {
                                $dazzlePopup.toast(result.data.text + ":" + result.data.err.code);
                                reject();
                            }
                        });
                    }
                })
            }

            this.getData = function () {
                return new Promise(function (resolve, reject) {
                    var nodes = [];
                    var rows = [];
                    var edited = [];
                    var deleted = [];
                    this.gridOptions.api.forEachNode(function (node) {
                        nodes.push(node);
                        if (node.deleted == true) {
                            deleted.push(node);
                        } else {
                            if (node.edited == true) {
                                edited.push(node);
                            }
                            rows.push(node.data);
                        }
                    });

                    resolve({
                        "nodes": nodes,
                        "rows": rows,
                        "edited": edited,
                        "deleted": deleted
                    });
                })
            }

            this.import = function () {
                if (!this.fileChooser) {
                    this.fileChooser = document.createElement('input');
                    this.fileChooser.setAttribute("type", "file");
                    this.fileChooser.style.display = "none";
                    this.fileChooser.addEventListener('change', function (event) {
                        var file = this.files[0];
                        alasql('SELECT * FROM FILE(?,{headers:true})', [event], function (data) {
                            this.gridOptions.api.setRowData(data);
                            this.gridOptions.api.refreshView();
                            this.gridOptions.api.forEachNode(function (node) {
                                node.edited = true;
                            });
                        });
                    });
                }
                this.fileChooser.click();
            }

            this.export = function () {
                var rowData = [];
                this.gridOptions.api.forEachNode(function (node) {
                    rowData.push(node.data);
                });
                alasql('SELECT * INTO XLSX("' + this.table + '.xlsx",{headers:true}) FROM ?', [rowData]);
            }

            this.isObject = function (item) {
                return (typeof item === "object" && !Array.isArray(item) && item !== null);
            }

            this.clean = function (obj) {
                for (var propName in obj) {
                    if (obj[propName] === null || obj[propName] === undefined || obj[propName] === '') {
                        delete obj[propName];
                    }
                }
            }


        });
		
		
	